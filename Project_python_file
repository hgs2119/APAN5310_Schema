#Load Librarys
import pandas as pd
import numpy as np
import psycopg2
import os

#Load files
main_df = pd.read_csv(".csv") 
p_df = pd.read_csv("product_table.csv") 
c_df = pd.read_csv("country_table.csv") 
comm_df = pd.read_csv("Commissioners_table.csv") 


#connect to database
conn = psycopg2.connect(
    host="localhost", 
    database="postgres", #please change database 
    user="postgres", #please change user name
    password="123") #please change password

#create a cursor
conn.autocommit = True
cur = conn.cursor()

#if table exist, drop table
query =  "DROP TABLE IF EXISTS Investigations CASCADE;"
query += "DROP TABLE IF EXISTS Publications CASCADE;"
query += "DROP TABLE IF EXISTS Determinations CASCADE;"
query += "DROP TABLE IF EXISTS Country CASCADE;"
query += "DROP TABLE IF EXISTS Products CASCADE;"
query += "DROP TABLE IF EXISTS Date_Dim CASCADE;"
query += "DROP TABLE IF EXISTS Commodities CASCADE;"
query += "DROP TABLE IF EXISTS Case_Groups CASCADE;"
query += "DROP TABLE IF EXISTS Staff_Assigned CASCADE;"
query += "DROP TABLE IF EXISTS Commissioners CASCADE;"
query += "DROP TABLE IF EXISTS Law_Firms CASCADE;"
query += "DROP TABLE IF EXISTS Petitioners  CASCADE;"
query += "DROP TABLE IF EXISTS date_sequence CASCADE;"
query += "DROP TABLE IF EXISTS ITC_Staff  CASCADE;"
query += "DROP TABLE IF EXISTS Representations  CASCADE;"
query += "DROP TABLE IF EXISTS Scopes  CASCADE;"


cur.execute(query)

#create Country table
query = "CREATE TABLE Country ( \
    Country_Code char(3) NOT NULL,\
    Country_Name varchar(100),\
    Region varchar(100),\
    Trade_Relationship varchar(50),\
	PRIMARY KEY (Country_Code)\
    );"
cur.execute(query)

#make dataframe for Country
df_Country = c_df[['Country', 'Trade_Relationship']].copy()
df_Country.drop_duplicates(inplace=True)
df_Country = df_Country.reset_index(drop=True)
df_Country.reset_index(inplace=True)

#insert data into Country table
Country_dict = {}
for index, row in df_Country.iterrows():
    Country_dict[row['Country']] = row['index']
    query = f"insert into Country (Country_Code, Country_Name, Region, Trade_Relationship) values ({row['index']}, '{row['Country']}', {row['Trade_Relationship']});"
    cur.execute(query)

#create Products table
query = "CREATE TABLE Products (
    Product_ID char(3) NOT NULL,\
    Product_Name varchar(100),\
    Product_Type varchar(100),\
	PRIMARY KEY (Country_Code)\
        );"
cur.execute(query)

#make dataframe for Products
df_Products = p_df[['Products']].copy()
df_Products.drop_duplicates(inplace=True)
df_Products = df_Products.reset_index(drop=True)
df_Products.reset_index(inplace=True)

#insert data into Products table
Products_dict = {}
for index, row in df_Products.iterrows():
    Products_dict[row['Products']] = row['index']
    query = f"insert into Manufacturer (Product_ID, Product_Name,Product_Type) values ({row['index']}, '{row['Products']}');"
    cur.execute(query)
    
   
#create date_sequence table
query = "CREATE TABLE date_sequence (date date NOT NULL)
)";
cur.execute(query)

#Insert Records into date_sequence table
query = "INSERT INTO
  date_sequence(date)
SELECT
  '1960-01-01'::DATE + SEQUENCE.number AS date
FROM
  GENERATE_SERIES(0, 27000) AS SEQUENCE (number)
  )";
cur.execute(query)

#create date_dim table
query = "CREATE TABLE date_dim (
  date_value DATE NOT NULL, \
  day_suffix TEXT NOT NULL, \
  day_name TEXT NOT NULL, \
  day_of_week INT NOT NULL, \
  day_of_month INT NOT NULL, \
  day_of_year INT NOT NULL, \
  month INT NOT NULL, \
  month_name TEXT NOT NULL, \
  month_name_abbreviated TEXT NOT NULL, \
  year_value INT NOT NULL, \
  quarter INT NOT NULL, \
  first_day_of_week DATE NOT NULL, \
  last_day_of_week DATE NOT NULL \
);"
cur.execute(query)

#Insert Records into date_sequence table

query = "INSERT INTO date_dim
SELECT   \
date as date,   \
TO_CHAR(date, 'fmDDth') AS day_suffix,  \
TO_CHAR(date, 'TMDay') AS day_name, \
EXTRACT(ISODOW FROM date) AS day_of_week, \ 
EXTRACT(DAY FROM date) AS day_of_month,  \ 
EXTRACT(DOY FROM date) AS day_of_year,   \
EXTRACT(MONTH FROM date) AS month,   \
TO_CHAR(date, 'TMMonth') AS month_name,   \
TO_CHAR(date, 'Mon') AS month_name_abbreviated,   \
EXTRACT(YEAR FROM date) AS year_value,   \
EXTRACT(quarter FROM date) AS quarter, \
date + (1 - EXTRACT(ISODOW FROM date))::INT AS first_day_of_week,   date + (7 - EXTRACT(ISODOW FROM date))::INT AS last_day_of_week from date_sequence \
ORDER BY date ASC \
);"
cur.execute(query)


#create Commodities table
query = "CREATE TABLE Commodities (
    HS_codes char(3) NOT NULL, \
    HS_description varchar(500), \
	PRIMARY KEY (HS_Codes) \
         );"
cur.execute(query)

#make dataframe for Commodities
df_Commodities = df[['HS_codes', 'HS_description']].copy()
df_Commodities = df_Commodities[df_Commodities['HS_codes'].notna()]
df_Commodities.drop_duplicates(inplace=True)

#insert data into Commodities table
for index, row in df_Commodities.iterrows():
    for comd in softlst:
        query = f"insert into Software (HS_codes, HS_description) values ('{row['HS_codes']}', '{comd}');"
        cur.execute(query)

#create Commissioners table
query = "CREATE TABLE Commissioners   (
    ID char(10) NOT NULL, \
    Commissioner_Name varchar(150) NOT NULL, \
    Term_begin_date DATE, \
    Term_end_date DATE, \
	PRIMARY KEY (ID), \
    	FOREIGN KEY (Term_begin_date) references Date_Dim \
	ON DELETE CASCADE \
	ON UPDATE CASCADE, \
    	FOREIGN KEY (Term_end_date) references Date_Dim \
	ON DELETE CASCADE \
	ON UPDATE CASCADE \
    );"
cur.execute(query)

#make dataframe for Commissioners
df_Commissioners = df[['ID', 'Term_end_date']].copy()
df_Commissioners.drop_duplicates(inplace=True)
df_Commissioners = df_Commissioners.reset_index(drop=True)
df_Commissioners.reset_index(inplace=True)

#insert data into Commissioners table
Commissioners_dict = {}
for index, row in df_Commissioners.iterrows():
    Commissioners_dict[row['Commissioners']] = row['index']
    query = f"insert into Country (ID, Commissioner_Name, Title) values ({row['index']}, '{row['Commissioners']}', {row['Title']});"
    cur.execute(query)
	

#create Law_Firms table
query = "CREATE TABLE Law_Firms   ( 
    Firm_Name varchar(150) NOT NULL, \
    Lead varchar(150) NOT NULL, \
	PRIMARY KEY (Firm_Name,Lead) \
    );"
cur.execute(query)

#create ITC_Staff table
query = "CREATE TABLE ITC_Staff  (
    ID char(10) NOT NULL, \
    Name varchar(150), \
    Title varchar(150), \
	PRIMARY KEY (ID) \
    );"
cur.execute(query)

#create Investigations table
query = "CREATE TABLE Investigations  (
    Investigation_Number varchar(11) NOT NULL, \
    Country_Code char(5) NOT NULL, \
    Product_ID char(3) NOT NULL, \
    Group_ID char(5) NOT NULL, \
    Investigation_Title char(10) NOT NULL, \
	PRIMARY KEY (Investigation_Number) \
    );"
cur.execute(query)

#create Investigations table
query = "CREATE TABLE Petitioners  (
    Firm_Name varchar(150) NOT NULL, \
    Group_ID char(5) NOT NULL, \
	PRIMARY KEY (Firm_Name, Group_ID), \
    	FOREIGN KEY (Group_ID) references Case_Groups(Group_ID) \
	ON DELETE CASCADE \
	ON UPDATE CASCADE \
    );"
 cur.execute(query)
 
 #create Determinations  table
query = "CREATE TABLE Determinations (
    Investigation_Number char(10) NOT NULL, \
    Phase varchar(100) NOT NULL, \
    Hearing_Date DATE NOT NULL, \
    Determination varchar(15) NOT NULL, \
	PRIMARY KEY (Investigation_Number, Phase), \
	FOREIGN KEY (Hearing_Date) REFERENCES Date_Dim(Date) \
	ON DELETE CASCADE \
	ON UPDATE CASCADE, \
    	CHECK (Phase IN ('Prelim', 'Final', 'Review')), \
	CHECK (Determination IN ('Affirmative', 'Negative', 'Terminated'))
    );"
cur.execute(query)

#create Publications table
query = "CREATE TABLE Publications (
    Pub_No char(4), \
    Investigation_Number varchar(11) NOT NULL, \
    Phase varchar(50), \
	PRIMARY KEY (Pub_No), \
    FOREIGN KEY (Investigation_Number) REFERENCES Investigations(Investigation_Number) \
    ON DELETE CASCADE \
	ON UPDATE CASCADE, \
    CHECK (Phase IN ('Prelim', 'Final', 'Review')) \
    );"
cur.execute(query)  
    
#create Staff_Assigned table
query = "CREATE TABLE Staff_Assigned (
   Group_ID char(5) NOT NULL, \
   Staff_ID char(10) NOT NULL, \
   	PRIMARY KEY (Group_ID, Staff_ID), \
   	FOREIGN KEY (Group_ID) references Case_Groups(Group_ID) \
	ON DELETE CASCADE \
	ON UPDATE CASCADE, \
   	FOREIGN KEY (Staff_ID) references ITC_Staff(ID) \
	ON DELETE CASCADE \
	ON UPDATE CASCADE \
    );"
cur.execute(query)
    
#create Representations  table
query = "CREATE TABLE Representations (
  Group_ID char(5) NOT NULL, \
  Petitioner_Name varchar(150) NOT NULL, \
  Law_Firm_Name varchar(150) NOT NULL, \
  Law_Lead varchar(150) NOT NULL, \
  PRIMARY KEY (Group_ID, Petitioner_Name, Law_Firm_Name), \
  FOREIGN KEY (Group_ID) references Case_Groups(Group_ID) \
  ON DELETE CASCADE \
  ON UPDATE CASCADE, \
  FOREIGN KEY (Petitioner_Name, Group_ID) references Petitioners \
  ON DELETE CASCADE \
  ON UPDATE CASCADE, \
  FOREIGN KEY (Law_Firm_Name, Law_Lead) references Law_Firms(Firm_Name,Lead) \
  ON DELETE CASCADE \
  ON UPDATE CASCADE \
    );"
cur.execute(query)

#Create Scopes Table
query = "CREATE TABLE Scopes (
  Group_ID char(5) NOT NULL, \
  HS_code char(10) NOT NULL, \
  PRIMARY KEY (Group_ID, HS_code), \
  FOREIGN KEY (Group_ID) references Case_Groups(Group_ID) \
  ON DELETE CASCADE \
  ON UPDATE CASCADE, \
  FOREIGN KEY (HS_code) references Commodities(HS_code) \
  ON DELETE CASCADE \
  ON UPDATE CASCADE \
    );"
cur.execute(query)

cur.close()
